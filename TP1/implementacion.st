Object subclass: #AlgoPedidos	instanceVariableNames: 'clientes'	classVariableNames: ''	package: 'TP1'!!AlgoPedidos methodsFor: 'initialization' stamp: 'MarcosVargas 10/29/2020 10:53'!initialize 	clientes := OrderedDictionary new.	! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 20:37'!removerMenuConNombre: unMenu para: unCliente 	((self obtenerCliente: unCliente) pedido) removerMenuConNombre: unMenu.! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Marcos 12/3/2020 16:49'!crearPedidoParaRetirarPara: unCliente	(clientes includesKey: unCliente) ifTrue: [ ElClienteYaTieneUnPedidoError signal ].		clientes at: unCliente put: ((Cliente new) establecerEntrega: (EntregaEnLocal new)).! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 20:36'!cantidadProductosEnPedidoDe: unCliente	^ ((self obtenerCliente: unCliente) pedido) cantidadProductos.! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 20:37'!precioPedidoDe: unCliente	^ (self obtenerCliente: unCliente) precioFinal. ! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Marcos 12/7/2020 20:16'!agregarCuponAPedidoDe: unCliente conPorcentaje: unPorcentaje	(self obtenerCliente: unCliente) agregarDescuento: ((DescuentoConPorcentaje new) conValor: unPorcentaje). ! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 20:37'!removerCuponDePedidoDe: unCliente 	(self obtenerCliente: unCliente) removerCupon. ! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 20:36'!agregarProductoConNombre: unNombre precio: unPrecio yCantidad: unaCantidad para: unCliente 	((self obtenerCliente: unCliente) pedido) agregarProductoConNombre: unNombre  precio: unPrecio yCantidad: unaCantidad. ! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Marcos 12/3/2020 16:49'!crearPedidoConDeliveryPara: unCliente	(clientes includesKey: unCliente) ifTrue: [ ElClienteYaTieneUnPedidoError signal ].		clientes at: unCliente put: ((Cliente new) establecerEntrega: (EntregaConDelivery new)).! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Marcos 12/7/2020 20:16'!agregarCuponAPedidoDe: unCliente conValor: unValor	(self obtenerCliente: unCliente) agregarDescuento: ((DescuentoValorFijo new) conValor: unValor). ! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 20:48'!obtenerCliente: unCliente 	(clientes includesKey: unCliente) ifFalse: [ ClienteNoTienePedidoError signal ].	^ (clientes at: unCliente).! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 20:37'!removerProductoConNombre: unProducto para: unCliente	((self obtenerCliente: unCliente) pedido) removerProductoConNombre: unProducto. ! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 20:36'!agregarMenuConNombre: unNombre precio: unPrecio yCantidad: unaCantidad para: unCliente	((self obtenerCliente: unCliente) pedido) agregarMenuConNombre: unNombre precio: unPrecio yCantidad: unaCantidad. ! !!AlgoPedidos methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 20:35'!actualizarProductoConNombre: unProducto conCantidad: unaCantidad para: unCliente 	((self obtenerCliente: unCliente) pedido) productoConNombre: unProducto nuevaCantidad: unaCantidad.  ! !Class subclass: #Cliente	instanceVariableNames: 'pedido entrega descuento'	classVariableNames: ''	package: 'TP1'!!Cliente methodsFor: 'as yet unclassified' stamp: 'Marcos 12/2/2020 22:36'!establecerEntrega: unaEntrega	entrega := unaEntrega.! !!Cliente methodsFor: 'as yet unclassified' stamp: 'Marcos 12/6/2020 15:33'!removerCupon	descuento := DescuentoNulo new.! !!Cliente methodsFor: 'as yet unclassified' stamp: 'Marcos 12/7/2020 20:17'!agregarDescuento: unDescuento	descuento := unDescuento.! !!Cliente methodsFor: 'as yet unclassified' stamp: 'Marcos 12/6/2020 15:34'!precioFinal	^ entrega aplicarRecarga: (pedido montoTotal) - (descuento aplicarDescuento: pedido).! !!Cliente methodsFor: 'accessing' stamp: 'Marcos 12/3/2020 18:15'!pedido	^ pedido.! !!Cliente methodsFor: 'initialization' stamp: 'Marcos 12/6/2020 15:33'!initialize 	pedido := Pedido new.	descuento := DescuentoNulo new.! !Error subclass: #ClienteNoTienePedidoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Class subclass: #Descuento	instanceVariableNames: 'valor'	classVariableNames: ''	package: 'TP1'!!Descuento methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 21:15'!conValor: unValor	self validarValorIngresado: unValor.		valor := unValor.! !!Descuento methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 21:11'!validarValorIngresado: unValor	self subclassResponsibility.! !!Descuento methodsFor: 'as yet unclassified' stamp: 'Marcos 12/3/2020 20:22'!aplicarDescuento: unPedido	self subclassResponsibility.! !Descuento subclass: #DescuentoConPorcentaje	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!DescuentoConPorcentaje methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 21:13'!validarValorIngresado: unValor 	((unValor >= 100) | (unValor <= 0)) ifTrue: [ ValorInvalidoError signal ].! !!DescuentoConPorcentaje methodsFor: 'as yet unclassified' stamp: 'Marcos 12/6/2020 15:50'!aplicarDescuento: unPedido	| unMonto |	(unPedido listaDeMenusEnPedido) ifNotEmpty: [ ^ 0 ].  		unMonto := unPedido montoTotal.	^ (valor * unMonto / 100).! !Descuento subclass: #DescuentoNulo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!DescuentoNulo methodsFor: 'as yet unclassified' stamp: 'Marcos 12/7/2020 17:47'!validarValorIngresado: unValor	NoSePuedeAsignarValorADescuentoNuloError signal.! !!DescuentoNulo methodsFor: 'as yet unclassified' stamp: 'Marcos 12/3/2020 20:27'!aplicarDescuento: unPedido.	^ 0.! !Descuento subclass: #DescuentoValorFijo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!DescuentoValorFijo methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 21:15'!validarValorIngresado: unValor	(unValor <= 0) ifTrue: [ ValorInvalidoError signal ].! !!DescuentoValorFijo methodsFor: 'as yet unclassified' stamp: 'Marcos 12/6/2020 15:48'!aplicarDescuento: unPedido	| montoPedido |	(unPedido listaDeMenusEnPedido) ifNotEmpty: [ ^ 0 ].		montoPedido := unPedido montoTotal.	(valor > montoPedido) ifTrue: [ ^ montoPedido ]. 	^ valor.! !Error subclass: #ElClienteYaTieneUnPedidoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Class subclass: #Entrega	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Entrega methodsFor: 'as yet unclassified' stamp: 'Marcos 12/3/2020 17:25'!aplicarRecarga: unMonto	self subclassResponsibility.! !Entrega subclass: #EntregaConDelivery	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!EntregaConDelivery methodsFor: 'as yet unclassified' stamp: 'Marcos 12/3/2020 17:25'!aplicarRecarga: unMonto 	^ (unMonto * 1.2).! !Entrega subclass: #EntregaEnLocal	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!EntregaEnLocal methodsFor: 'as yet unclassified' stamp: 'Marcos 12/3/2020 17:26'!aplicarRecarga: unMonto 	^ unMonto.! !Error subclass: #MontoInvalidoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Error subclass: #NoExisteProductoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Error subclass: #NoSePuedeAsignarValorADescuentoNuloError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Class subclass: #Pedido	instanceVariableNames: 'productos menusEnPedido'	classVariableNames: ''	package: 'TP1'!!Pedido methodsFor: 'as yet unclassified' stamp: 'Marcos 12/3/2020 20:27'!listaDeMenusEnPedido	^ menusEnPedido.! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Marcos 12/3/2020 19:57'!cantidadProductos	| cantidadProductos |	cantidadProductos  := 0.	productos do: [ :producto | cantidadProductos := cantidadProductos + producto cantidad].	^ cantidadProductos.! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 21:36'!productoConNombre: unNombre nuevaCantidad: unaCantidad 	(self obtenerProducto: unNombre) nuevaCantidad: unaCantidad.! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 21:39'!agregarProductoConNombre: unNombre  precio: unPrecio yCantidad: unaCantidad 	(productos includesKey: unNombre) ifTrue: [ YaFueAgregadoElProductoError signal ].	productos at: unNombre put: ((Producto new) conNombre: unNombre  precio: unPrecio  yCantidad: unaCantidad ). ! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Marcos 12/3/2020 19:50'!montoTotal  	| monto |	monto := 0.	productos do: [ :producto | monto := monto + (producto precio * producto cantidad)].	^ monto.! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 21:38'!obtenerProducto: unProducto  	(productos includesKey: unProducto) ifFalse: [ NoExisteProductoError signal ].		^ (productos at: unProducto).! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Marcos 12/6/2020 16:23'!agregarMenuConNombre: unNombre precio: unPrecio yCantidad: unaCantidad	| nuevoMenu |	(productos includesKey: unNombre) ifTrue: [ YaFueAgregadoElProductoError signal ].	nuevoMenu := ((Producto new) conNombre: unNombre precio: unPrecio yCantidad: unaCantidad).	productos at: unNombre put: nuevoMenu.	menusEnPedido add: unNombre.! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 21:35'!removerProductoConNombre: unProducto  	self obtenerProducto: unProducto.	productos removeKey: unProducto.! !!Pedido methodsFor: 'as yet unclassified' stamp: 'Marcos 12/6/2020 16:24'!removerMenuConNombre: unMenu	self obtenerProducto: unMenu.	productos removeKey: unMenu.	menusEnPedido remove: unMenu.! !!Pedido methodsFor: 'initialization' stamp: 'Marcos 12/6/2020 16:24'!initialize 	productos := OrderedDictionary new.	menusEnPedido := OrderedCollection new.! !Class subclass: #Producto	instanceVariableNames: 'nombre precio cantidad'	classVariableNames: ''	package: 'TP1'!!Producto methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 20:59'!nuevaCantidad: unaCantidad.	self validarValorIngresado: unaCantidad.		cantidad := unaCantidad.! !!Producto methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 20:59'!conNombre: unNombre precio: unPrecio yCantidad: unaCantidad	self validarValorIngresado: unPrecio. 	self validarValorIngresado: unaCantidad.		nombre := unNombre.	precio := unPrecio.	cantidad := unaCantidad.! !!Producto methodsFor: 'as yet unclassified' stamp: 'Marcos 12/4/2020 20:58'!validarValorIngresado: unValor	(unValor <= 0) ifTrue: [ ValorInvalidoError signal ].! !!Producto methodsFor: 'accessing' stamp: 'Marcos 12/3/2020 17:40'!cantidad	^ cantidad.! !!Producto methodsFor: 'accessing' stamp: 'Marcos 12/3/2020 17:40'!precio	^ precio.! !Error subclass: #ValorInvalidoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Error subclass: #YaFueAgregadoElProductoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!