TestCase subclass: #AlgoPedidosTest	instanceVariableNames: 'algoPedidos'	classVariableNames: ''	package: 'TP1Tests'!!AlgoPedidosTest methodsFor: 'running' stamp: 'MarcosVargas 11/3/2020 11:01'!setUp	algoPedidos := AlgoPedidos new.! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'Marcos 12/7/2020 18:26'!test32SeAplicaDescuentoCorrectamenteYLaCantidadDeProductosEsCorrecta	algoPedidos crearPedidoParaRetirarPara:  'Marcos'.	algoPedidos agregarProductoConNombre: 'coca' precio: 100 yCantidad: 2 para: 'Marcos'.	algoPedidos agregarProductoConNombre: 'coca2' precio: 100 yCantidad: 2 para: 'Marcos'.	algoPedidos agregarProductoConNombre: 'coca3' precio: 100 yCantidad: 2 para: 'Marcos'.		algoPedidos agregarCuponAPedidoDe: 'Marcos' conValor: 599.		self assert: (algoPedidos precioPedidoDe: 'Marcos') equals: 1.	self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Marcos') equals: 6.  	! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/4/2020 12:01'!test22NoSePuedeAgregarMenuAClienteInexistente		self should: [ algoPedidos agregarMenuConNombre: 'menu viernes' precio: 110  yCantidad: 1 para: 'Marcos' ] raise: ClienteNoTienePedidoError .! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/3/2020 11:02'!test11SeAgregaMenuAPedidoSinDelivery	algoPedidos crearPedidoParaRetirarPara: 'Marcos'.	algoPedidos agregarMenuConNombre: 'Menu lunes' precio: 180  yCantidad: 1 para: 'Marcos'.		self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Marcos') equals: 1. ! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/4/2020 12:01'!test23NoSePuedeAgregarProductoIndividualAClienteInexistente		self should: [ algoPedidos agregarProductoConNombre: 'Gaseosa' precio: 100  yCantidad: 1 para: 'Marcos' ] raise: ClienteNoTienePedidoError .! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/3/2020 11:02'!test12SeAgregaMenuYProductoAPedidoYLaCantidadDeProductosEsDos	algoPedidos crearPedidoParaRetirarPara: 'Marcos'.	algoPedidos agregarMenuConNombre: 'Menu lunes' precio: 180  yCantidad: 1 para: 'Marcos'.	algoPedidos agregarProductoConNombre: 'Milanesa' precio: 150  yCantidad: 1 para: 'Marcos'.		self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Marcos') equals: 2. ! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/3/2020 11:38'!test26NoSePuedeCrearUnPedidoParaRetirarAUnClienteQueYaPoseePedido		algoPedidos crearPedidoParaRetirarPara: 'Marcos'.		self should: [ algoPedidos crearPedidoParaRetirarPara: 'Marcos' ] raise: ElClienteYaTieneUnPedidoError .! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/4/2020 10:22'!test08NoSePuedeAgregarMenuConPrecioNegativo	algoPedidos crearPedidoParaRetirarPara: 'Marcos'.		self should: [algoPedidos agregarMenuConNombre: 'Menu lunes' precio: -80  yCantidad: 1 para: 'Marcos'.] raise: ValorInvalidoError .	self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Marcos') equals: 0. ! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/3/2020 11:02'!test04SeAgregaProductoAPedidoConDelivery	algoPedidos crearPedidoConDeliveryPara: 'Marcos'.	algoPedidos agregarProductoConNombre: 'Gaseosa' precio: 80  yCantidad: 1 para: 'Marcos'.		self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Marcos') equals: 1.	self assert: (algoPedidos precioPedidoDe: 'Marcos') equals: 96.0.! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/4/2020 10:22'!test07NoSePuedeAgregarProductoConCantidadNegativa	algoPedidos crearPedidoParaRetirarPara: 'Marcos'.		self should: [algoPedidos agregarProductoConNombre: 'Gaseosa' precio: 80  yCantidad: -1 para: 'Marcos'] raise: ValorInvalidoError .	self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Marcos') equals: 0. ! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/3/2020 11:37'!test25NoSePuedeCrearUnPedidoConDeliveryAUnClienteQueYaPoseePedido		algoPedidos crearPedidoConDeliveryPara: 'Marcos'.		self should: [ algoPedidos crearPedidoConDeliveryPara: 'Marcos' ] raise: ElClienteYaTieneUnPedidoError .! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/4/2020 12:01'!test16NoSePuedeActualizarCantidadDeProductoDeClienteInexistente 		self should: [algoPedidos actualizarProductoConNombre: 'Gaseosa' conCantidad: 2 para: 'Marcos'] raise: ClienteNoTienePedidoError.! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/3/2020 11:02'!test03CantidadDeProductosEnPedidoCommienzaEnCero	algoPedidos crearPedidoConDeliveryPara: 'Marcos'.		self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Marcos') equals: 0.! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/3/2020 14:19'!test01CrearPedidoSinDelivery	algoPedidos crearPedidoParaRetirarPara: ''.		self assert: (algoPedidos precioPedidoDe: '') equals: 0.! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/4/2020 12:01'!test18NoSePuedeAgregarCuponConValorAPedidoDeClienteInexistente 		self should: [algoPedidos agregarCuponAPedidoDe: 'Marcos' conValor: 10 ] raise: ClienteNoTienePedidoError.! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/4/2020 10:22'!test20NoSePuedeAgregarCuponConPorcentajeMenorAUnoAPedidoDeCliente 		algoPedidos crearPedidoConDeliveryPara: 'Marcos'.		self should: [algoPedidos agregarCuponAPedidoDe: 'Marcos' conPorcentaje: 0 ] raise: ValorInvalidoError .! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/3/2020 11:02'!test10SeAgregaMenuAPedidoConDelivery	algoPedidos crearPedidoConDeliveryPara: 'Marcos'.	algoPedidos agregarMenuConNombre: 'Menu lunes' precio: 180  yCantidad: 1 para: 'Marcos'.		self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Marcos') equals: 1. ! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'Marcos 12/7/2020 18:25'!test31NoSePuedeCambiarLaCantidadDeUnProductoQueNoFueAgregado		algoPedidos crearPedidoConDeliveryPara: 'marcos'.		self should: [ algoPedidos actualizarProductoConNombre: 'coca' conCantidad: 2 para: 'marcos' ] raise:	NoExisteProductoError. ! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'Marcos 12/4/2020 21:02'!test13SePuedeCambiarCantidadDeMenus	algoPedidos crearPedidoParaRetirarPara: 'Marcos'.	algoPedidos agregarMenuConNombre: 'm viernes' precio: 122 yCantidad: 1 para: 'Marcos'.		algoPedidos actualizarProductoConNombre: 'm viernes' conCantidad: 2 para: 'Marcos'. 		self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Marcos') equals: 2.! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'Marcos 12/4/2020 21:04'!test14SePuedeAgregarMasDeUnMenu	algoPedidos crearPedidoParaRetirarPara: 'Marcos'.		algoPedidos agregarMenuConNombre: 'm viernes' precio: 122 yCantidad: 2 para: 'Marcos'.		self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Marcos') equals: 2.! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/4/2020 12:01'!test28NoSePuedeRemoverCuponDeClienteInexistente		self should: [ algoPedidos removerCuponDePedidoDe: 'Marcos' ] raise: ClienteNoTienePedidoError .! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/4/2020 12:01'!test30NoSePuedeRemoverProductoIndividualDeClienteInexistente		self should: [ algoPedidos removerProductoConNombre: 'milanesa' para: 'Marcos' ] raise: ClienteNoTienePedidoError .! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/4/2020 12:01'!test27NoSePuedeConocerElPrecioDelPedidoDeUnClienteInexistente		self should: [ algoPedidos precioPedidoDe: 'Marcos' ] raise: ClienteNoTienePedidoError .! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/4/2020 12:01'!test17NoSePuedeAgregarCuponConPorcentajeAPedidoDeClienteInexistente 		self should: [algoPedidos agregarCuponAPedidoDe: 'Marcos' conPorcentaje: 10 ] raise: ClienteNoTienePedidoError.! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/4/2020 12:01'!test29NoSePuedeRemoverMenuDeClienteInexistente		self should: [ algoPedidos removerMenuConNombre: 'menu viernes' para: 'Marcos' ] raise: ClienteNoTienePedidoError .! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/4/2020 10:25'!test19NoSePuedeAgregarCuponConPorcentajeMayorOIgualACienAPedidoDeCliente 		algoPedidos crearPedidoConDeliveryPara: 'Marcos'.		self should: [algoPedidos agregarCuponAPedidoDe: 'Marcos' conPorcentaje: 100 ] raise: ValorInvalidoError .! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/4/2020 10:22'!test06NoSePuedeAgregarProductoConPrecioNegativo	algoPedidos crearPedidoParaRetirarPara: 'Marcos'.		self should: [algoPedidos agregarProductoConNombre: 'Gaseosa' precio: -80  yCantidad: 1 para: 'Marcos'] raise: ValorInvalidoError .	self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Marcos') equals: 0. ! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/3/2020 11:03'!test15SePuedeActualizarCantidadDeProductoQueNoEsMenu	algoPedidos crearPedidoParaRetirarPara: 'Marcos'.	algoPedidos agregarProductoConNombre: 'Milanesa' precio: 180  yCantidad: 1 para: 'Marcos'.	algoPedidos actualizarProductoConNombre: 'Milanesa' conCantidad: 3 para: 'Marcos'.	 	self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Marcos') equals: 3. ! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/4/2020 12:01'!test24NoSePuedeSaberLaCantidadDeProductosEnPedidoDeClienteInexistente		self should: [ algoPedidos cantidadProductosEnPedidoDe: 'Marcos' ] raise: ClienteNoTienePedidoError .! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'Marcos 12/4/2020 21:00'!test09NoSePuedeAgregarMenuConCantidadNegativa	algoPedidos crearPedidoParaRetirarPara: 'Marcos'.		self should: [algoPedidos agregarMenuConNombre: 'Menu lunes' precio: 80  yCantidad: -1 para: 'Marcos'] raise: ValorInvalidoError .	self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Marcos') equals: 0. ! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/3/2020 11:01'!test02CrearPedidoConDelivery	algoPedidos crearPedidoConDeliveryPara: 'Marcos'.		self assert: (algoPedidos precioPedidoDe: 'Marcos') equals: 0.! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/3/2020 11:28'!test21NoSePuedeAgregarCuponConValorMenorAUnoAPedidoDeCliente 		algoPedidos crearPedidoConDeliveryPara: 'Marcos'.		self should: [algoPedidos agregarCuponAPedidoDe: 'Marcos' conValor: 0 ] raise: ValorInvalidoError .! !!AlgoPedidosTest methodsFor: 'tests' stamp: 'MarcosVargas 11/3/2020 11:02'!test05SeAgregaProductoAPedidoParaRetirar	algoPedidos crearPedidoParaRetirarPara: 'Marcos'.	algoPedidos agregarProductoConNombre: 'Gaseosa' precio: 80  yCantidad: 1 para: 'Marcos'.		self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Marcos') equals: 1.	self assert: (algoPedidos precioPedidoDe: 'Marcos') equals: 80.! !TestCase subclass: #AlgoPedidosTestsellos	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1Tests'!!AlgoPedidosTestsellos methodsFor: 'tests' stamp: 'Edson 10/20/2020 19:05'!test04AplicarCuponDeDescuentoPorcentualAPedidoConProductos
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoParaRetirarPara: 'Tomás'.
	
	algoPedidos agregarProductoConNombre: 'Ensalada' precio: 200.0 yCantidad: 1 para: 'Tomás'.
	algoPedidos agregarCuponAPedidoDe: 'Tomás' conPorcentaje: 10. 
	
	self assert: (algoPedidos precioPedidoDe: 'Tomás') closeTo: (200*0.9) precision: 0.01. "-10%"! !!AlgoPedidosTestsellos methodsFor: 'tests' stamp: 'Edson 10/20/2020 20:11'!test09RemoverProductosAPedido
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoConDeliveryPara: 'Sebas'.
	
	algoPedidos agregarProductoConNombre: 'Asado' precio: 500.0 yCantidad: 1 para: 'Sebas'.
	algoPedidos agregarMenuConNombre: 'Menú Lunes' precio: 200.0 yCantidad: 1 para: 'Sebas'.
	algoPedidos agregarProductoConNombre: 'vino' precio: 250.0 yCantidad: 1 para: 'Sebas'.
	 
	self assert: (algoPedidos precioPedidoDe: 'Sebas') equals: (950*1.2). "20% extra"
	
	algoPedidos removerProductoConNombre: 'vino' para: 'Sebas'.
	algoPedidos removerMenuConNombre: 'Menú Lunes' para: 'Sebas'.
	
	self assert: (algoPedidos precioPedidoDe: 'Sebas') equals: (500*1.2). "20% extra"! !!AlgoPedidosTestsellos methodsFor: 'tests' stamp: 'Edson 10/20/2020 20:11'!test08RemoverCuponDeDescuentoAPedido
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoParaRetirarPara: 'Martin'.

	algoPedidos agregarCuponAPedidoDe: 'Martin' conValor: 15. 	
	algoPedidos agregarProductoConNombre: 'Pizza' precio: 350.0 yCantidad: 1 para: 'Martin'.
	
	self assert: (algoPedidos precioPedidoDe: 'Martin') closeTo: 335.0 precision: 0.01.  "-15"
	
	algoPedidos removerCuponDePedidoDe: 'Martin'.

	self assert: (algoPedidos precioPedidoDe: 'Martin') closeTo: 350.0 precision: 0.01.! !!AlgoPedidosTestsellos methodsFor: 'tests' stamp: 'Edson 10/3/2020 00:02'!test03SeAgregaMenuAPedido
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoParaRetirarPara: 'Pablo'.
	
	algoPedidos agregarMenuConNombre: 'Menú viernes' precio: 200.0 yCantidad: 1 para: 'Pablo'.
	algoPedidos agregarProductoConNombre: 'Gaseosa' precio: 250.0 yCantidad: 1 para: 'Pablo'.
	
	self assert: (algoPedidos precioPedidoDe: 'Pablo') closeTo: 450.0 precision: 0.1.! !!AlgoPedidosTestsellos methodsFor: 'tests' stamp: 'Edson 10/20/2020 20:10'!test05SeCambiaCantidadDeProductosEnPedido
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoParaRetirarPara: 'Carlos'.
	
	algoPedidos agregarMenuConNombre: 'Menú viernes' precio: 200.0 yCantidad: 1 para: 'Carlos'.
	algoPedidos agregarProductoConNombre: 'Gaseosa' precio: 250.0 yCantidad: 1 para: 'Carlos'.
	
	self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Carlos') equals: 2.
	
	algoPedidos actualizarProductoConNombre: 'Gaseosa' conCantidad: 3 para: 'Carlos'.
	
	self assert: (algoPedidos cantidadProductosEnPedidoDe: 'Carlos') equals: 4.! !!AlgoPedidosTestsellos methodsFor: 'tests' stamp: 'Edson 10/20/2020 20:11'!test07AgregarCuponAPedidoConMenuNoRealizaDescuento
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoParaRetirarPara: 'Julian'.

	algoPedidos agregarMenuConNombre: 'Menu jueves' precio: 200.0 yCantidad: 1 para: 'Julian'.
	algoPedidos agregarProductoConNombre: 'Ensalada' precio: 200.0 yCantidad: 2 para: 'Julian'.

	algoPedidos agregarCuponAPedidoDe: 'Julian' conValor: 15.
	
	self assert: (algoPedidos precioPedidoDe: 'Julian') equals: 600.0.! !!AlgoPedidosTestsellos methodsFor: 'tests' stamp: 'Edson 10/20/2020 20:11'!test06AplicarCuponDeDescuentoFijoAPedidoConProductos
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoParaRetirarPara: 'Diego'.

	algoPedidos agregarCuponAPedidoDe: 'Diego' conValor: 15. 	
	algoPedidos agregarProductoConNombre: 'Milanesa' precio: 350.0 yCantidad: 1 para: 'Diego'.
	
	self assert: (algoPedidos precioPedidoDe: 'Diego') closeTo: 335.0 precision: 0.01. "-15"! !!AlgoPedidosTestsellos methodsFor: 'tests' stamp: 'Edson 10/20/2020 19:17'!test01SeAgreganProductosAPedidoParaRetirar
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoParaRetirarPara: 'Eugenio'.
	
	algoPedidos agregarProductoConNombre: 'Milanesa' precio: 250.0 yCantidad: 2 para: 'Eugenio'.
	algoPedidos agregarProductoConNombre: 'Gelatina' precio: 100.0 yCantidad: 1 para: 'Eugenio'.
	 
	self assert: (algoPedidos precioPedidoDe: 'Eugenio') equals: 600.0.! !!AlgoPedidosTestsellos methodsFor: 'tests' stamp: 'Edson 10/20/2020 19:17'!test02SeAgreganProductosAPedidoConDelivery
	| algoPedidos | 
	
	algoPedidos := AlgoPedidos new.
	algoPedidos crearPedidoConDeliveryPara: 'Santiago'.
	
	algoPedidos agregarProductoConNombre: 'Asado' precio: 500.0 yCantidad: 1 para: 'Santiago'.
	algoPedidos agregarProductoConNombre: 'vino' precio: 250.0 yCantidad: 1 para: 'Santiago'.
	 
	self assert: (algoPedidos precioPedidoDe: 'Santiago') equals: (750*1.2). "20% extra"! !TestCase subclass: #ClienteTest	instanceVariableNames: 'cliente'	classVariableNames: ''	package: 'TP1Tests'!!ClienteTest methodsFor: 'running' stamp: 'Marcos 12/6/2020 15:37'!setUp 	cliente := Cliente new.! !!ClienteTest methodsFor: 'tests' stamp: 'Marcos 12/7/2020 20:16'!test04SeRemueveCuponAClienteYPagaSinDescuento		cliente establecerEntrega: EntregaEnLocal new.	(cliente pedido) agregarProductoConNombre: 'gaseosa' precio: 100  yCantidad: 1.	cliente agregarDescuento: ((DescuentoValorFijo new) conValor: 50).		self assert: (cliente precioFinal) equals: 50.		cliente removerCupon.		self assert: (cliente precioFinal) equals: 100.  ! !!ClienteTest methodsFor: 'tests' stamp: 'Marcos 12/7/2020 20:16'!test02SeLePuedeCambiarElCuponACliente		cliente establecerEntrega: EntregaEnLocal new.	(cliente pedido) agregarProductoConNombre: 'gaseosa' precio: 100  yCantidad: 1.		self assert: (cliente precioFinal) equals: 100.		cliente agregarDescuento: ((DescuentoValorFijo new) conValor: 50).		self assert: (cliente precioFinal) equals: 50.  ! !!ClienteTest methodsFor: 'tests' stamp: 'Marcos 12/6/2020 15:40'!test01ClienteComienzaSiempreConUnPedidoVacio	| pedidoCliente |		pedidoCliente := cliente pedido.		self assert: (pedidoCliente cantidadProductos) equals: 0.! !!ClienteTest methodsFor: 'tests' stamp: 'Marcos 12/6/2020 16:01'!test03SeLePuedeCambiarLaEntregaACliente		cliente establecerEntrega: EntregaEnLocal new.	(cliente pedido) agregarProductoConNombre: 'gaseosa' precio: 100  yCantidad: 1.		self assert: (cliente precioFinal) equals: 100.		cliente establecerEntrega: EntregaConDelivery new.		self assert: (cliente precioFinal) equals: 120.  ! !TestCase subclass: #DescuentoTests	instanceVariableNames: 'descuentoNulo descuentoConPorcentaje descuentoConValor monto cliente'	classVariableNames: ''	package: 'TP1Tests'!!DescuentoTests methodsFor: 'running' stamp: 'Marcos 12/7/2020 17:39'!setUp 	cliente := Cliente new.	descuentoNulo := DescuentoNulo new.	descuentoConPorcentaje := DescuentoConPorcentaje new.	descuentoConValor := DescuentoValorFijo new.	monto := 0.	! !!DescuentoTests methodsFor: 'running' stamp: 'Marcos 12/7/2020 17:59'!test06NoSePuedeEstablecerValorAUnDescuentoNulo		self should: [ descuentoNulo conValor: 100 ] raise: NoSePuedeAsignarValorADescuentoNuloError.! !!DescuentoTests methodsFor: 'tests' stamp: 'Marcos 12/7/2020 17:54'!test03NoSePuedeEstablecerPorcentajeInvalido	self should: [ descuentoConPorcentaje conValor: -1 ] raise: ValorInvalidoError.	self should: [ descuentoConPorcentaje conValor: 0 ] raise: ValorInvalidoError.	self should: [ descuentoConPorcentaje conValor: 100 ] raise: ValorInvalidoError.! !!DescuentoTests methodsFor: 'tests' stamp: 'Marcos 12/7/2020 20:16'!test02SeAplicaDescuentoAUnMontoSinMenuCorrectamente 		(cliente pedido) agregarProductoConNombre: 'plataso' precio: 500 yCantidad: 1. 	cliente agregarDescuento: (descuentoConValor conValor: 100). 		self assert: (descuentoConValor aplicarDescuento: (cliente pedido)) equals: 100.		cliente agregarDescuento: (descuentoConPorcentaje conValor: 50). 		self assert: (descuentoConPorcentaje aplicarDescuento: (cliente pedido)) equals: 250.		! !!DescuentoTests methodsFor: 'tests' stamp: 'Marcos 12/7/2020 20:16'!test05ElDescuentoEsMayorAlMontoEntoncesSeRestaSoloLaCantidadIgualAlMonto	(cliente pedido) agregarProductoConNombre: 'plataso' precio: 500 yCantidad: 1. 	cliente agregarDescuento: (descuentoConValor conValor: 700). 		self assert: (descuentoConValor aplicarDescuento: (cliente pedido)) equals: 500.! !!DescuentoTests methodsFor: 'tests' stamp: 'Marcos 12/7/2020 17:55'!test04NoSePuedeEstablecerValorFijoInvalido		self should: [ descuentoConValor conValor: -1 ] raise: ValorInvalidoError.	self should: [ descuentoConValor conValor: 0 ] raise: ValorInvalidoError.! !!DescuentoTests methodsFor: 'tests' stamp: 'Marcos 12/7/2020 20:16'!test01NoSeAplicaDescuentoAPedidoConMenu		(cliente pedido) agregarMenuConNombre: 'mega familiar' precio: 1000 yCantidad: 1. 	cliente agregarDescuento: (descuentoConValor conValor: 100). 		self assert: (descuentoConValor aplicarDescuento: (cliente pedido)) equals: 0.		cliente agregarDescuento: (descuentoConPorcentaje conValor: 50). 		self assert: (descuentoConPorcentaje aplicarDescuento: (cliente pedido)) equals: 0.! !TestCase subclass: #EntregaTests	instanceVariableNames: 'pedido'	classVariableNames: ''	package: 'TP1Tests'!!EntregaTests methodsFor: 'tests' stamp: 'Marcos 12/7/2020 18:09'!test01UnaEntregaEnLocalNoTieneRecarga		| entrega |		entrega := EntregaEnLocal new.		self assert: (entrega aplicarRecarga: 1000) equals: 1000.! !!EntregaTests methodsFor: 'tests' stamp: 'Marcos 12/7/2020 18:11'!test02UnaEntregaConDeliveryTieneRecarga		| entrega |		entrega := EntregaConDelivery new.		self assert: (entrega aplicarRecarga: 1000) equals: 1200.! !TestCase subclass: #PedidoTests	instanceVariableNames: 'pedido'	classVariableNames: ''	package: 'TP1Tests'!!PedidoTests methodsFor: 'tests' stamp: 'Marcos 12/7/2020 17:17'!test08NoSePuedeAgregarMenuSiYaFueAgregadoAntes		pedido agregarMenuConNombre: 'lunes' precio: 180 yCantidad: 2.	self should: [ pedido agregarMenuConNombre: 'lunes' precio: 180 yCantidad: 3 ] raise: YaFueAgregadoElProductoError .! !!PedidoTests methodsFor: 'tests' stamp: 'Marcos 12/6/2020 16:29'!test02ListaDeMenusEnPedidoInformaElTipoDeMenusNoLaCantidad		pedido agregarMenuConNombre: 'lunes' precio: 100 yCantidad: 3.		self assert: ((pedido listaDeMenusEnPedido) size) equals: 1.! !!PedidoTests methodsFor: 'tests' stamp: 'Marcos 12/6/2020 16:33'!test01AgregoTresMenusDiferentesYEnLaListaDeMenusHayTres		pedido agregarMenuConNombre: 'lunes' precio: 100 yCantidad: 1.	pedido agregarMenuConNombre: 'martes' precio: 150 yCantidad: 1.	pedido agregarMenuConNombre: 'familiar' precio: 200 yCantidad: 1.		self assert: (pedido cantidadProductos) equals: 3.	self assert: ((pedido listaDeMenusEnPedido) size) equals: 3.! !!PedidoTests methodsFor: 'tests' stamp: 'Marcos 12/7/2020 17:11'!test05RemuevoUnProductoYElProductoYaNoEstaEnLaLista	pedido agregarProductoConNombre: 'gaseosa' precio: 100 yCantidad: 2.		pedido removerProductoConNombre: 'gaseosa'.		self assert: (pedido cantidadProductos) equals: 0. ! !!PedidoTests methodsFor: 'tests' stamp: 'Marcos 12/7/2020 17:22'!test10NoSePuedeRemoverMenuQueNuncaFueAgregado	self should: [ pedido removerMenuConNombre: 'lunes' ] raise: NoExisteProductoError.! !!PedidoTests methodsFor: 'tests' stamp: 'Marcos 12/7/2020 17:13'!test06RemuevoUnMenuYElMenuaNoEstaEnLaLista	pedido agregarMenuConNombre: 'lunes' precio: 200 yCantidad: 2.		pedido removerMenuConNombre: 'lunes'.		self assert: (pedido cantidadProductos) equals: 0.	self assert: ((pedido listaDeMenusEnPedido) isEmpty). ! !!PedidoTests methodsFor: 'tests' stamp: 'Marcos 12/7/2020 17:16'!test07NoSePuedeAgregarProductoSiYaFueAgregadoAntes		pedido agregarProductoConNombre: 'milanesa' precio: 200 yCantidad: 2.		self should: [ pedido agregarProductoConNombre: 'milanesa' precio: 200 yCantidad: 3 ] raise: YaFueAgregadoElProductoError .! !!PedidoTests methodsFor: 'tests' stamp: 'Marcos 12/7/2020 17:20'!test09NoSePuedeRemoverProductoQueNuncaFueAgregado		self should: [ pedido removerProductoConNombre: 'coca' ] raise: NoExisteProductoError.! !!PedidoTests methodsFor: 'tests' stamp: 'Marcos 12/6/2020 16:40'!test04SeCambiaLaCantidadDeGaseosasDeDosACuatro		pedido agregarProductoConNombre: 'gaseosa' precio: 100  yCantidad: 2.		self assert: (pedido cantidadProductos ) equals: 2.		pedido productoConNombre: 'gaseosa' nuevaCantidad: 4.		self assert: (pedido cantidadProductos ) equals: 4.! !!PedidoTests methodsFor: 'tests' stamp: 'Marcos 12/6/2020 16:32'!test03AgregoTresProductosDeCienPesosElMontoEsTrescientos		pedido agregarProductoConNombre: 'paty' precio: 100  yCantidad: 1. 	pedido agregarProductoConNombre: 'pancho' precio: 100  yCantidad: 1.	pedido agregarProductoConNombre: 'cupcake' precio: 100  yCantidad: 1.		self assert: (pedido montoTotal) equals: 300.! !!PedidoTests methodsFor: 'running' stamp: 'Marcos 12/6/2020 16:07'!setUp 	pedido := Pedido new.! !TestCase subclass: #ProductoTests	instanceVariableNames: 'pedido'	classVariableNames: ''	package: 'TP1Tests'!!ProductoTests methodsFor: 'tests' stamp: 'Marcos 12/7/2020 18:15'!test01SeCreaUnProductoYSeCambiaSuCantidadCorrectamente		| producto |		producto := (Producto new) conNombre: 'milanesa' precio: 180 yCantidad: 2.		self assert: (producto cantidad) equals: 2.	self assert: (producto precio) equals: 180.		producto nuevaCantidad: 4.		self assert: (producto cantidad) equals: 4.	! !!ProductoTests methodsFor: 'tests' stamp: 'Marcos 12/7/2020 18:19'!test02NoSePuedeEstablecerCantidadInvalida		| producto |		producto := (Producto new).	self should: [ producto conNombre: 'coca' precio: 100 yCantidad: -1 ] raise: ValorInvalidoError.	self should: [ producto conNombre: 'coca' precio: 100 yCantidad: 0 ] raise: ValorInvalidoError.		self should: [ producto nuevaCantidad: -1 ] raise: ValorInvalidoError.	self should: [ producto nuevaCantidad: 0 ] raise: ValorInvalidoError.		! !!ProductoTests methodsFor: 'tests' stamp: 'Marcos 12/7/2020 18:21'!test03NoSePuedeEstablecerPrecioInvalido	| producto |		producto := Producto new.		self should: [ producto conNombre: 'coca' precio: -1 yCantidad: 1 ] raise: ValorInvalidoError.	self should: [ producto conNombre: 'coca' precio: 0 yCantidad: 1 ] raise: ValorInvalidoError.! !